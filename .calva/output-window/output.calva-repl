; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\Dusan Tavic\clojureselect & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless & popd
; Using host:port 127.0.0.1:60056 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉clojureselect.core꞉>  ; Use `alt+enter` to evaluate
clj꞉clojureselect.core꞉> 
; Jack-in done.
clj꞉clojureselect.core꞉> 
#'clojureselect.data/candidates
clj꞉clojureselect.data꞉> 
#'clojureselect.data/jobs
clj꞉clojureselect.data꞉> 
#'clojureselect.data/qualifications
clj꞉clojureselect.data꞉> 
#'clojureselect.data/criteria
clj꞉clojureselect.data꞉> 
#'clojureselect.data/ratings
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-candidate
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-jobs-criteria
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-candidates
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-jobs-criteria
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ponder
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ponder
clj꞉clojureselect.data꞉> 
[{:job-id 1, :qualification-id 1, :ponder 0.5}
 {:job-id 1, :qualification-id 2, :ponder 0.3}
 {:job-id 1, :qualification-id 3, :ponder 0.2}]
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-criteria
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-criteria
clj꞉clojureselect.data꞉> 
#function[clojure.core/filter/fn--5958]
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-criteria
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-criteria
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-job
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10}
 {:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7})
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-ratings-of-criteria
clj꞉clojureselect.data꞉> 
[{:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8}]
clj꞉clojureselect.data꞉> 
18
clj꞉clojureselect.data꞉> 
#'clojureselect.data/sum-of-all-ratings
clj꞉clojureselect.data꞉> 
18
clj꞉clojureselect.data꞉> 
19.1
clj꞉clojureselect.data꞉> 
17
clj꞉clojureselect.data꞉> 
#'clojureselect.data/summarize-ratings1
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/summarize-ratings-of-criteria
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444})
clj꞉clojureselect.data꞉> 
[{:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1}]
clj꞉clojureselect.data꞉> 
[{:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1}]
clj꞉clojureselect.data꞉> 
[{:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7}]
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444})
clj꞉clojureselect.data꞉> 
({:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162})
clj꞉clojureselect.data꞉> 
({:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162})
clj꞉clojureselect.data꞉> 
({:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10, :normalized-value 0.5882352941176471}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7, :normalized-value 0.4117647058823529})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/summarize-ratings-of-criteria
clj꞉clojureselect.data꞉> 
[{:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444}]
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-ratings-of-criteria
clj꞉clojureselect.data꞉> 
[{:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444}]
clj꞉clojureselect.data꞉> 
[{:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162}]
clj꞉clojureselect.data꞉> 
[{:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10, :normalized-value 0.5882352941176471}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7, :normalized-value 0.4117647058823529}]
clj꞉clojureselect.data꞉> 
; Syntax error compiling at (c:\Users\Dusan Tavic\clojureselect\src\clojureselect\data.clj:151:17).
; Unable to resolve symbol: job-id in this context
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10}
 {:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10}
 {:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7})
clj꞉clojureselect.data꞉> 
[{:job-id 1, :qualification-id 1, :ponder 0.5}
 {:job-id 1, :qualification-id 2, :ponder 0.3}
 {:job-id 1, :qualification-id 3, :ponder 0.2}]
clj꞉clojureselect.data꞉> 
; Syntax error compiling at (c:\Users\Dusan Tavic\clojureselect\src\clojureselect\data.clj:151:81).
; Unable to resolve symbol: job-id in this context
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-rating
clj꞉clojureselect.data꞉> 
#'clojureselect.data/normalize-job-ratings
clj꞉clojureselect.data꞉> 
; Error printing return value (NullPointerException) at clojure.lang.RT/doubleCast (RT.java:1353).
; null
clj꞉clojureselect.data꞉> 
; Execution error (NullPointerException) at clojureselect.data/get-normalized-rating$fn (form-init2323843461450665289.clj:151).
; null
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-rating
clj꞉clojureselect.data꞉> 
; Error printing return value (NullPointerException) at clojure.lang.RT/doubleCast (RT.java:1353).
; null
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-rating
clj꞉clojureselect.data꞉> 
{:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-rating
clj꞉clojureselect.data꞉> 
{:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
clj꞉clojureselect.data꞉> 
#'clojureselect.data/normalize-job-ratings
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10, :normalized-value 0.5882352941176471}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7, :normalized-value 0.4117647058823529})
clj꞉clojureselect.data꞉> 
#'clojureselect.data/get-normalized-rating
clj꞉clojureselect.data꞉> 
#'clojureselect.data/normalize-job-ratings
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10, :normalized-value 0.5882352941176471}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7, :normalized-value 0.4117647058823529})
clj꞉clojureselect.data꞉> 
({:id 1, :candidate-id 1, :job-id 1, :qualification-id 1, :value 10, :normalized-value 0.5555555555555556}
 {:id 2, :candidate-id 1, :job-id 1, :qualification-id 2, :value 10, :normalized-value 0.5235602094240838}
 {:id 3, :candidate-id 1, :job-id 1, :qualification-id 3, :value 10, :normalized-value 0.5882352941176471}
 {:id 4, :candidate-id 2, :job-id 1, :qualification-id 1, :value 8, :normalized-value 0.4444444444444444}
 {:id 5, :candidate-id 2, :job-id 1, :qualification-id 2, :value 9.1, :normalized-value 0.4764397905759162}
 {:id 6, :candidate-id 2, :job-id 1, :qualification-id 3, :value 7, :normalized-value 0.4117647058823529})
clj꞉clojureselect.data꞉> 
