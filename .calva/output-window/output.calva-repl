; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\Dusan Tavic\clojureselect & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless & popd
; Using host:port 127.0.0.1:49974 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉clojureselect.business-logic꞉>  ; Use `alt+enter` to evaluate
clj꞉clojureselect.business-logic꞉> 
; Jack-in done.
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/ahp-ponders
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/inverse-ponders
clj꞉clojureselect.business-logic꞉> 
[{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/3}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/2}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/inverse-ponders-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (inverse-ponders-test-2) (form-init5549873758247607836.clj:1763)
Testing inverse-ponders function
expected: (= (inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8N}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8.0}]))
nil
clj꞉clojureselect.core-test꞉> 
; Syntax error compiling at (c:\Users\Dusan Tavic\clojureselect\test\clojureselect\core_test.clj:1:8014).
; Unable to resolve symbol: expected in this context
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
[{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/3}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/2}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/add-inverse-ponders-test
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test) (form-init5549873758247607836.clj:1790)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8N}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test) (form-init5549873758247607836.clj:1790)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 
; Syntax error compiling at (c:\Users\Dusan Tavic\clojureselect\test\clojureselect\core_test.clj:1819:1).
; Unable to resolve symbol: add-inverse-ponders-2 in this context
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8N}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 1/8} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8N}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 1/8} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 8}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 1/8} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 1/8} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.business-logic/ahp-ponders
clj꞉clojureselect.business-logic꞉> 
[{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/ahp-ponders
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 

FAIL in (add-inverse-ponders-test-2) (form-init5549873758247607836.clj:1817)
Testing add-inverse-ponders function
expected: (= (add-inverse-ponders ahp-ponders) expected)
  actual: (not (= [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}] [{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [1 0], :significance 1/6} {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [2 0], :significance 1/8} {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [2 1], :significance 2.0}]))
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.business-logic/add-inverse-ponders
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/add-inverse-ponders-test-2
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/add-inverse-ponders-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
[{:job-id 1, :qualification-id-base 1, :qualification-id-reference 2, :position [0 1], :significance 3}
 {:job-id 1, :qualification-id-base 1, :qualification-id-reference 3, :position [0 2], :significance 2}
 {:job-id 1, :qualification-id-base 2, :qualification-id-reference 3, :position [1 2], :significance 0.5}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/get-ponders-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
[[1 1 1] [1 1 1] [1 1 1]]
clj꞉clojureselect.business-logic꞉> 
[[1 1 1 1 1 1 1] [1 1 1 1 1 1 1] [1 1 1 1 1 1 1] [1 1 1 1 1 1 1]]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/create-matrix-test
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/create-matrix-test-2
clj꞉clojureselect.core-test꞉> 
; Execution error (ArityException) at clojureselect.core-test/eval8699 (form-init5549873758247607836.clj:1853).
; Wrong number of args (0) passed to: clojureselect.business-logic/create-matrix
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
[[1 3 2] [1/3 1 0.5] [1/2 2.0 1]]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/create-ahp-matrix
clj꞉clojureselect.business-logic꞉> 
[[1 3 2] [1/3 1 0.5] [1/2 2.0 1]]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/create-ahp-matrix-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.business-logic/calculate-total-array
clj꞉clojureselect.business-logic꞉> 
[0.5294117647058824 0.16176470588235292 0.3088235294117647]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/calculate-total-array-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.business-logic/calculate-ahp
clj꞉clojureselect.business-logic꞉> 
[{:job-id 1, :qualification-id 1, :ponder 0.5, :ahp-ponder 0.5294117647058824}
 {:job-id 1, :qualification-id 2, :ponder 0.3, :ahp-ponder 0.16176470588235292}
 {:job-id 1, :qualification-id 3, :ponder 0.2, :ahp-ponder 0.3088235294117647}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/get-ahp-ponders
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/create-ahp-matrix
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/calculate-total-array
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/get-ponders-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/create-ahp-matrix-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/calculate-total-array-test
clj꞉clojureselect.core-test꞉> 
#'clojureselect.business-logic/create-ahp-matrix
clj꞉clojureselect.business-logic꞉> 
[[1 3 2] [1/3 1 0.5] [1/2 2.0 1]]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.business-logic/calculate-ahp
clj꞉clojureselect.business-logic꞉> 
[{:job-id 1, :qualification-id 1, :ponder 0.5, :ahp-ponder 0.5294117647058824}
 {:job-id 1, :qualification-id 2, :ponder 0.3, :ahp-ponder 0.16176470588235292}
 {:job-id 1, :qualification-id 3, :ponder 0.2, :ahp-ponder 0.3088235294117647}]
clj꞉clojureselect.business-logic꞉> 
#'clojureselect.core-test/calculate-ahp-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
#'clojureselect.core-test/selection-advice-test
clj꞉clojureselect.core-test꞉> 
nil
clj꞉clojureselect.core-test꞉> 
